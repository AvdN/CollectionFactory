import time
import yaml
import json
from os import listdir


total = 0
start = time.time()

tests_file = yaml.load(open('tests.yml', 'r'))
out = open('CollectionFactoryTests.m', 'w')

out.write('// --- DO NOT EDIT THIS FILE--- \n')
out.write('// It is auto-generated from tests.yml\n\n')

out.write('#import "CollectionFactoryTestCase.h"\n\n')

out.write('@interface CollectionFactoryTests : XCTestCase\n')
out.write('@end\n\n')

out.write('@implementation CollectionFactoryTests\n\n')

for className, classTests in tests_file['tests'].items():
    for testName, testConditions in classTests.items():
        # object to JSON string
        out.write('- (void)test%sToJsonString\n' % testName)
        out.write('{\n')
        out.write('    %s *object = %s;\n' % (className, testConditions['object']))
        out.write('    assertThat([object jsonString], equalTo(@"%s"));\n' % (testConditions['string']))
        out.write('}\n\n')
        
        # object to JSON data
        out.write('- (void)test%sToJsonData\n' % testName)
        out.write('{\n')
        out.write('    %s *object = %s;\n' % (className, testConditions['object']))
        out.write('    NSString *string = [[NSString alloc] initWithData:[object jsonData]\n                                             encoding:NSUTF8StringEncoding];\n')
        out.write('    assertThat(string, equalTo(@"%s"));\n' % (testConditions['string']))
        out.write('}\n\n')
        
        # JSON string to object
        out.write('- (void)testJsonStringTo%s\n' % testName)
        out.write('{\n')
        out.write('    %s *object = [%s numberWithJsonString:@"%s"];\n' % (className, className, testConditions['string']))
        out.write('    assertThat(object, equalTo(%s));\n' % (testConditions['object']))
        out.write('}\n\n')
        
        # JSON data to object
        out.write('- (void)testJsonDataTo%s\n' % testName)
        out.write('{\n')
        out.write('    NSData *data = [@"%s" dataUsingEncoding:NSUTF8StringEncoding];\n' % testConditions['string'])
        out.write('    %s *object = [%s numberWithJsonData:data];\n' % (className, className))
        out.write('    assertThat(object, equalTo(%s));\n' % (testConditions['object']))
        out.write('}\n\n')
        
        total += 4

out.write('@end\n\n')

print('%d tests generated in %f seconds.' % (total, time.time() - start))
